name: LiveUser

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      release_type:
        description: '发布类型'
        required: true
        default: 'Beta'
        type: choice
        options:
          - Beta
          - Release

permissions:
  contents: write
  packages: write

env:
  GO_VERSION: "1.23"
  BINARY_NAME: "LiveUser"
  DOCKER_IMAGE: "liveuser"
  PLATFORMS: "linux/amd64,linux/arm64"

################################################################################
# 代码检查 (所有情况都执行)
################################################################################
jobs:
  lint:
    name: 代码检查
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 Go 环境
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: false

      - name: 验证必需文件
        run: |
          required_files=("main.go" "main.js" "demo.html")
          missing_files=()
          
          for file in "${required_files[@]}"; do
            if [ ! -f "$file" ]; then
              missing_files+=("$file")
            fi
          done
          
          if [ ${#missing_files[@]} -ne 0 ]; then
            echo "缺少必需文件:"
            printf '%s\n' "${missing_files[@]}"
            exit 1
          fi

      - name: 初始化模块
        run: |
          if [ ! -f go.mod ]; then
            go mod init github.com/${{ github.repository }}
          fi
          
          go get github.com/gorilla/websocket@latest
          go mod tidy

      - name: 代码检查
        run: |
          go fmt ./...
          go vet ./...
          go build -o /tmp/test-build .
          rm -f /tmp/test-build

################################################################################
# 版本处理 (仅手动触发时执行)
################################################################################
  version:
    name: 版本处理
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    needs: lint
    outputs:
      final_version: ${{ steps.version_step.outputs.final_version }}
      is_release: ${{ github.event.inputs.release_type == 'Release' }}
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 设置版本号
        id: version_step
        run: |
          latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "获取到的最新标签: $latest_tag"

          version_no_v="${latest_tag#v}"
          major=$(echo "$version_no_v" | cut -d. -f1)
          minor=$(echo "$version_no_v" | cut -d. -f2)
          patch=$(echo "$version_no_v" | cut -d. -f3)

          patch=$((patch + 1))
          new_version="v${major}.${minor}.${patch}"

          echo "生成新版本号: $new_version"
          echo "final_version=$new_version" >> $GITHUB_OUTPUT

      - name: 创建并推送新标签
        run: |
          version="${{ steps.version_step.outputs.final_version }}"
          echo "即将创建并推送标签: ${version}"
          
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          git tag -a "${version}" -m "Release ${version}"
          git push origin "${version}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

################################################################################
# 多平台构建 (仅手动触发时执行)
################################################################################
  build:
    name: 多平台构建
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    needs: version
    strategy:
      fail-fast: false
      matrix:
        os: [ linux, darwin, windows, freebsd ]
        arch: [ amd64, arm64 ]
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 Go 环境
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: false

      - name: 准备 Go 模块依赖
        run: |
          if [ ! -f go.mod ]; then
            go mod init github.com/${{ github.repository }}
          fi
          if [ ! -f go.sum ]; then
            touch go.sum
          fi
          
          echo "正在下载依赖..."
          go mod tidy
          go mod download

      - name: 构建与打包
        run: |
          VERSION=${{ needs.version.outputs.final_version }}
          echo "当前使用版本号：$VERSION"

          mkdir -p release

          temp_dir="release/${{ env.BINARY_NAME }}-${VERSION}-${{ matrix.os }}-${{ matrix.arch }}"
          mkdir -p "${temp_dir}"

          binary_name="${{ env.BINARY_NAME }}"
          if [ "${{ matrix.os }}" = "windows" ]; then
            binary_name="${binary_name}.exe"
          fi

          echo "开始编译 -> OS: ${{ matrix.os }} / ARCH: ${{ matrix.arch }}"
          GOOS=${{ matrix.os }} GOARCH=${{ matrix.arch }} CGO_ENABLED=0 \
          go build \
            -trimpath \
            -ldflags="-s -w -X main.version=${VERSION}" \
            -o "${temp_dir}/${binary_name}" \
            .

          # 复制必需文件
          cp main.js "${temp_dir}/"
          cp demo.html "${temp_dir}/"

          echo "编译完成，开始打包压缩..."

          cd release
          zip_file="${{ env.BINARY_NAME }}-${VERSION}-${{ matrix.os }}-${{ matrix.arch }}.zip"
          zip -9 -r "${zip_file}" "$(basename ${temp_dir})"

          echo "生成校验和..."
          sha256sum "${zip_file}" | tee -a "checksums-${{ matrix.os }}-${{ matrix.arch }}.txt"

      - name: 上传构建产物
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.os }}-${{ matrix.arch }}
          path: release
          retention-days: 1

################################################################################
# Docker 构建与推送
################################################################################
  docker:
    name: Docker 构建与推送
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    needs: version
    env:
      REGISTRY_USER: ${{ secrets.DOCKER_USERNAME }}
      REGISTRY_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 检查环境变量
        run: |
          if [ -z "$REGISTRY_USER" ]; then
            echo "错误: DOCKER_USERNAME 未设置"
            exit 1
          fi
          echo "Docker 用户名长度: ${#REGISTRY_USER}"
          echo "Docker 用户名前3位: ${REGISTRY_USER:0:3}***"

      - name: 设置 QEMU
        uses: docker/setup-qemu-action@v3

      - name: 设置 Buildx
        uses: docker/setup-buildx-action@v3

      - name: 登录 Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.REGISTRY_USER }}
          password: ${{ env.REGISTRY_PASSWORD }}

      - name: 构建并推送镜像 (Beta)
        if: ${{ needs.version.outputs.is_release != 'true' }}
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: ${{ env.PLATFORMS }}
          push: true
          tags: |
            ${{ env.REGISTRY_USER }}/${{ env.DOCKER_IMAGE }}:${{ needs.version.outputs.final_version }}
            ${{ env.REGISTRY_USER }}/${{ env.DOCKER_IMAGE }}:beta
          build-args: |
            VERSION=${{ needs.version.outputs.final_version }}
            GO_VERSION=${{ env.GO_VERSION }}

      - name: 构建并推送镜像 (Release)
        if: ${{ needs.version.outputs.is_release == 'true' }}
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: ${{ env.PLATFORMS }}
          push: true
          tags: |
            ${{ env.REGISTRY_USER }}/${{ env.DOCKER_IMAGE }}:${{ needs.version.outputs.final_version }}
            ${{ env.REGISTRY_USER }}/${{ env.DOCKER_IMAGE }}:latest
          build-args: |
            VERSION=${{ needs.version.outputs.final_version }}
            GO_VERSION=${{ env.GO_VERSION }}

################################################################################
# 创建 GitHub Release
################################################################################
  release:
    name: 创建发布
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    needs: [version, build, docker]
    steps:
      - name: 下载构建产物
        uses: actions/download-artifact@v4
        with:
          path: release
          pattern: build-*
          merge-multiple: true

      - name: 整理发布文件
        run: |
          mkdir -p final_release
          find release -name "*.zip" -exec cp {} final_release/ \;
          find release -name "checksums-*.txt" -exec cat {} >> final_release/checksums.txt \;

      - name: 生成发布说明
        run: |
          echo "**SHA256:**" > final_release/release_notes.md
          echo '```' >> final_release/release_notes.md
          cat final_release/checksums.txt >> final_release/release_notes.md
          echo '```' >> final_release/release_notes.md

      - name: 创建 GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.version.outputs.final_version }}
          files: |
            final_release/*.zip
            final_release/checksums.txt
          body_path: final_release/release_notes.md
          draft: false
          prerelease: ${{ needs.version.outputs.is_release != 'true' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
